<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Desi Commando: Black Ops</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: linear-gradient(135deg, #1a1a2e, #16213e);
            overflow: hidden;
            color: #fff;
        }
        
        #game-container {
            position: relative;
            width: 800px;
            height: 600px;
            border: 4px solid #4cc9f0;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(76, 201, 240, 0.5);
            overflow: hidden;
        }
        
        #game-canvas {
            background-color: #1a1a2e;
        }
        
        #ui-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            pointer-events: none;
        }
        
        .stat-box {
            background: rgba(0, 0, 0, 0.7);
            padding: 10px 20px;
            border-radius: 8px;
            border: 2px solid #4cc9f0;
            box-shadow: 0 0 10px rgba(76, 201, 240, 0.3);
        }
        
        #game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.85);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10;
            display: none;
        }
        
        #game-over h1 {
            font-size: 48px;
            color: #ff4655;
            margin-bottom: 20px;
            text-shadow: 0 0 10px rgba(255, 70, 85, 0.7);
        }
        
        #final-score {
            font-size: 32px;
            color: #4cc9f0;
            margin-bottom: 30px;
        }
        
        #restart-btn {
            padding: 15px 40px;
            background: linear-gradient(135deg, #ff4655, #ff5e6c);
            border: none;
            border-radius: 8px;
            color: white;
            font-size: 20px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 0 15px rgba(255, 70, 85, 0.5);
        }
        
        #restart-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 0 20px rgba(255, 70, 85, 0.7);
        }
        
        #instructions {
            position: absolute;
            bottom: 20px;
            left: 0;
            width: 100%;
            text-align: center;
            color: #a9b7c6;
            font-size: 16px;
            pointer-events: none;
        }
        
        #title {
            text-align: center;
            font-size: 36px;
            margin-bottom: 20px;
            color: #4cc9f0;
            text-shadow: 0 0 10px rgba(76, 201, 240, 0.7);
        }
        
        .health-bar {
            width: 200px;
            height: 20px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 10px;
            overflow: hidden;
            margin-top: 5px;
        }
        
        .health-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff4655, #ff5e6c);
            border-radius: 10px;
            transition: width 0.3s ease;
        }
    </style>
</head>
<body>
    <div id="game-container">
        <canvas id="game-canvas" width="800" height="600"></canvas>
        
        <div id="ui-container">
            <div class="stat-box">
                <div>SCORE: <span id="score">0</span></div>
                <div>HEALTH:</div>
                <div class="health-bar">
                    <div class="health-fill" id="health-bar"></div>
                </div>
            </div>
            <div class="stat-box">
                <div>ENEMIES: <span id="enemy-count">0</span></div>
                <div>AMMO: <span id="ammo">∞</span></div>
            </div>
        </div>
        
        <div id="instructions">
            WASD to move • LEFT CLICK to shoot • SHIFT to dash
        </div>
        
        <div id="game-over">
            <h1>GAME OVER</h1>
            <div id="final-score">Score: 0</div>
            <button id="restart-btn">PLAY AGAIN</button>
        </div>
    </div>

    <script>
        // Game constants
        const PLAYER_SPEED = 5;
        const PLAYER_RADIUS = 20;
        const BULLET_SPEED = 10;
        const BULLET_RADIUS = 4;
        const ENEMY_SPEED_MIN = 1;
        const ENEMY_SPEED_MAX = 2.5;
        const ENEMY_RADIUS = 15;
        const ENEMY_SPAWN_RATE = 60;
        const DASH_COOLDOWN = 30;
        const DASH_SPEED = 15;
        const DASH_DURATION = 10;
        
        // Game variables
        let canvas, ctx;
        let player = {
            x: 400,
            y: 300,
            health: 100,
            score: 0,
            shootCooldown: 0,
            dashCooldown: 0,
            dashing: false,
            dashDirection: { x: 0, y: 0 },
            dashProgress: 0
        };
        
        let bullets = [];
        let enemies = [];
        let particles = [];
        let enemySpawnTimer = 0;
        let keys = {};
        let gameOver = false;
        
        // Initialize game
        function init() {
            canvas = document.getElementById('game-canvas');
            ctx = canvas.getContext('2d');
            
            // Event listeners
            document.addEventListener('keydown', (e) => {
                keys[e.key] = true;
                
                // Restart game if Enter pressed and game over
                if (gameOver && e.key === 'Enter') {
                    resetGame();
                }
            });
            
            document.addEventListener('keyup', (e) => {
                keys[e.key] = false;
            });
            
            canvas.addEventListener('click', (e) => {
                if (gameOver) return;
                
                const rect = canvas.getBoundingClientRect();
                const mouseX = e.clientX - rect.left;
                const mouseY = e.clientY - rect.top;
                
                shoot(mouseX, mouseY);
            });
            
            document.getElementById('restart-btn').addEventListener('click', resetGame);
            
            // Start game loop
            gameLoop();
        }
        
        // Reset game state
        function resetGame() {
            player = {
                x: 400,
                y: 300,
                health: 100,
                score: 0,
                shootCooldown: 0,
                dashCooldown: 0,
                dashing: false,
                dashDirection: { x: 0, y: 0 },
                dashProgress: 0
            };
            
            bullets = [];
            enemies = [];
            particles = [];
            enemySpawnTimer = 0;
            gameOver = false;
            
            document.getElementById('game-over').style.display = 'none';
            updateUI();
        }
        
        // Game loop
        function gameLoop() {
            update();
            render();
            requestAnimationFrame(gameLoop);
        }
        
        // Update game state
        function update() {
            if (gameOver) return;
            
            // Update player
            updatePlayer();
            
            // Update cooldowns
            if (player.shootCooldown > 0) player.shootCooldown--;
            if (player.dashCooldown > 0) player.dashCooldown--;
            
            // Spawn enemies
            if (enemySpawnTimer <= 0) {
                spawnEnemy();
                enemySpawnTimer = ENEMY_SPAWN_RATE - Math.min(Math.floor(player.score / 10), 50);
            } else {
                enemySpawnTimer--;
            }
            
            // Update bullets
            for (let i = bullets.length - 1; i >= 0; i--) {
                bullets[i].x += bullets[i].dx;
                bullets[i].y += bullets[i].dy;
                
                // Remove bullets that go off screen
                if (bullets[i].x < -BULLET_RADIUS || bullets[i].x > canvas.width + BULLET_RADIUS ||
                    bullets[i].y < -BULLET_RADIUS || bullets[i].y > canvas.height + BULLET_RADIUS) {
                    bullets.splice(i, 1);
                }
            }
            
            // Update enemies
            for (let i = enemies.length - 1; i >= 0; i--) {
                // Move toward player
                const dx = player.x - enemies[i].x;
                const dy = player.y - enemies[i].y;
                const dist = Math.sqrt(dx * dx + dy * dy);
                
                enemies[i].x += (dx / dist) * enemies[i].speed;
                enemies[i].y += (dy / dist) * enemies[i].speed;
                
                // Check collision with player
                const playerDist = Math.sqrt(
                    Math.pow(enemies[i].x - player.x, 2) + 
                    Math.pow(enemies[i].y - player.y, 2)
                );
                
                if (playerDist < ENEMY_RADIUS + PLAYER_RADIUS) {
                    player.health--;
                    createParticles(enemies[i].x, enemies[i].y, 5, '#ff4655');
                }
                
                // Check collision with bullets
                for (let j = bullets.length - 1; j >= 0; j--) {
                    const bulletDist = Math.sqrt(
                        Math.pow(enemies[i].x - bullets[j].x, 2) + 
                        Math.pow(enemies[i].y - bullets[j].y, 2)
                    );
                    
                    if (bulletDist < ENEMY_RADIUS + BULLET_RADIUS) {
                        enemies[i].health -= bullets[j].damage;
                        bullets.splice(j, 1);
                        createParticles(enemies[i].x, enemies[i].y, 10, '#4cc9f0');
                        
                        if (enemies[i].health <= 0) {
                            player.score++;
                            createParticles(enemies[i].x, enemies[i].y, 20, '#ff4655');
                            enemies.splice(i, 1);
                            break;
                        }
                    }
                }
            }
            
            // Update particles
            for (let i = particles.length - 1; i >= 0; i--) {
                particles[i].x += Math.cos(particles[i].angle) * particles[i].speed;
                particles[i].y += Math.sin(particles[i].angle) * particles[i].speed;
                particles[i].lifetime--;
                
                if (particles[i].lifetime <= 0) {
                    particles.splice(i, 1);
                }
            }
            
            // Check game over
            if (player.health <= 0) {
                gameOver = true;
                document.getElementById('game-over').style.display = 'flex';
                document.getElementById('final-score').textContent = `Score: ${player.score}`;
            }
            
            // Update UI
            updateUI();
        }
        
        // Update player position and state
        function updatePlayer() {
            if (player.dashing) {
                player.x += player.dashDirection.x * DASH_SPEED;
                player.y += player.dashDirection.y * DASH_SPEED;
                player.dashProgress++;
                
                if (player.dashProgress >= DASH_DURATION) {
                    player.dashing = false;
                }
                return;
            }
            
            // Handle movement
            if (keys['w'] || keys['ArrowUp']) {
                player.y -= PLAYER_SPEED;
                if (player.y < PLAYER_RADIUS) player.y = PLAYER_RADIUS;
            }
            if (keys['s'] || keys['ArrowDown']) {
                player.y += PLAYER_SPEED;
                if (player.y > canvas.height - PLAYER_RADIUS) player.y = canvas.height - PLAYER_RADIUS;
            }
            if (keys['a'] || keys['ArrowLeft']) {
                player.x -= PLAYER_SPEED;
                if (player.x < PLAYER_RADIUS) player.x = PLAYER_RADIUS;
            }
            if (keys['d'] || keys['ArrowRight']) {
                player.x += PLAYER_SPEED;
                if (player.x > canvas.width - PLAYER_RADIUS) player.x = canvas.width - PLAYER_RADIUS;
            }
            
            // Handle dash
            if ((keys['Shift'] || keys[' ']) && player.dashCooldown === 0) {
                player.dashing = true;
                player.dashProgress = 0;
                player.dashCooldown = DASH_COOLDOWN;
                
                // Determine dash direction
                let dx = 0, dy = 0;
                if (keys['a'] || keys['ArrowLeft']) dx = -1;
                if (keys['d'] || keys['ArrowRight']) dx = 1;
                if (keys['w'] || keys['ArrowUp']) dy = -1;
                if (keys['s'] || keys['ArrowDown']) dy = 1;
                
                // If no movement keys, dash toward mouse
                if (dx === 0 && dy === 0) {
                    // For simplicity, dash right if no movement and no mouse
                    dx = 1;
                    dy = 0;
                }
                
                // Normalize direction
                const length = Math.sqrt(dx * dx + dy * dy);
                player.dashDirection = {
                    x: dx / length,
                    y: dy / length
                };
            }
        }
        
        // Shoot a bullet toward the target coordinates
        function shoot(targetX, targetY) {
            if (player.shootCooldown > 0) return;
            
            const dx = targetX - player.x;
            const dy = targetY - player.y;
            const dist = Math.sqrt(dx * dx + dy * dy);
            
            bullets.push({
                x: player.x,
                y: player.y,
                dx: (dx / dist) * BULLET_SPEED,
                dy: (dy / dist) * BULLET_SPEED,
                damage: 10
            });
            
            player.shootCooldown = 5;
            createParticles(player.x, player.y, 3, '#4cc9f0');
        }
        
        // Spawn a new enemy
        function spawnEnemy() {
            const side = Math.floor(Math.random() * 4);
            let x, y;
            
            if (side === 0) { // Top
                x = Math.random() * canvas.width;
                y = -ENEMY_RADIUS;
            } else if (side === 1) { // Right
                x = canvas.width + ENEMY_RADIUS;
                y = Math.random() * canvas.height;
            } else if (side === 2) { // Bottom
                x = Math.random() * canvas.width;
                y = canvas.height + ENEMY_RADIUS;
            } else { // Left
                x = -ENEMY_RADIUS;
                y = Math.random() * canvas.height;
            }
            
            enemies.push({
                x: x,
                y: y,
                speed: ENEMY_SPEED_MIN + Math.random() * (ENEMY_SPEED_MAX - ENEMY_SPEED_MIN),
                health: 30
            });
        }
        
        // Create particles for visual effects
        function createParticles(x, y, count, color) {
            for (let i = 0; i < count; i++) {
                particles.push({
                    x: x,
                    y: y,
                    angle: Math.random() * Math.PI * 2,
                    speed: 0.5 + Math.random() * 2.5,
                    size: 2 + Math.random() * 4,
                    color: color,
                    lifetime: 20 + Math.random() * 20
                });
            }
        }
        
        // Update UI elements
        function updateUI() {
            document.getElementById('score').textContent = player.score;
            document.getElementById('enemy-count').textContent = enemies.length;
            document.getElementById('health-bar').style.width = `${player.health}%`;
        }
        
        // Render game objects
        function render() {
            // Clear canvas
            ctx.fillStyle = '#1a1a2e';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw grid
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.05)';
            ctx.lineWidth = 1;
            
            for (let x = 0; x < canvas.width; x += 50) {
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas.height);
                ctx.stroke();
            }
            
            for (let y = 0; y < canvas.height; y += 50) {
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(canvas.width, y);
                ctx.stroke();
            }
            
            // Draw particles
            for (const particle of particles) {
                ctx.fillStyle = particle.color;
                ctx.globalAlpha = particle.lifetime / 40;
                ctx.beginPath();
                ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
                ctx.fill();
            }
            ctx.globalAlpha = 1;
            
            // Draw enemies
            for (const enemy of enemies) {
                // Enemy body
                ctx.fillStyle = '#ff4655';
                ctx.beginPath();
                ctx.arc(enemy.x, enemy.y, ENEMY_RADIUS, 0, Math.PI * 2);
                ctx.fill();
                
                // Enemy inner circle
                ctx.fillStyle = '#cc0000';
                ctx.beginPath();
                ctx.arc(enemy.x, enemy.y, ENEMY_RADIUS - 5, 0, Math.PI * 2);
                ctx.fill();
                
                // Health bar
                const healthWidth = (ENEMY_RADIUS * 2) * (enemy.health / 30);
                ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
                ctx.fillRect(enemy.x - ENEMY_RADIUS, enemy.y - ENEMY_RADIUS - 10, ENEMY_RADIUS * 2, 5);
                ctx.fillStyle = '#4cc9f0';
                ctx.fillRect(enemy.x - ENEMY_RADIUS, enemy.y - ENEMY_RADIUS - 10, healthWidth, 5);
            }
            
            // Draw bullets
            for (const bullet of bullets) {
                ctx.fillStyle = '#4cc9f0';
                ctx.beginPath();
                ctx.arc(bullet.x, bullet.y, BULLET_RADIUS, 0, Math.PI * 2);
                ctx.fill();
                
                ctx.fillStyle = '#ffffff';
                ctx.beginPath();
                ctx.arc(bullet.x, bullet.y, BULLET_RADIUS - 2, 0, Math.PI * 2);
                ctx.fill();
            }
            
            // Draw player
            ctx.fillStyle = '#4cc9f0';
            ctx.beginPath();
            ctx.arc(player.x, player.y, PLAYER_RADIUS, 0, Math.PI * 2);
            ctx.fill();
            
            ctx.fillStyle = '#ffffff';
            ctx.beginPath();
            ctx.arc(player.x, player.y, PLAYER_RADIUS - 8, 0, Math.PI * 2);
            ctx.fill();
            
            ctx.fillStyle = '#4cc9f0';
            ctx.beginPath();
            ctx.arc(player.x, player.y, PLAYER_RADIUS - 12, 0, Math.PI * 2);
            ctx.fill();
            
            // Draw player direction indicator (simplified)
            ctx.strokeStyle = '#4cc9f0';
            ctx.lineWidth = 3;
            ctx.beginPath();
            ctx.moveTo(player.x, player.y);
            ctx.lineTo(player.x + PLAYER_RADIUS, player.y);
            ctx.stroke();
        }
        
        // Start the game when the page loads
        window.onload = init;
    </script>
</body>
</html>
